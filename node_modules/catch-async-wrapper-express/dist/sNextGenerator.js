"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sNextGenerator = void 0;
const CatchAsyncError_js_1 = __importDefault(require("./CatchAsyncError.js"));
const checktypes_1 = require("@samislam/checktypes");
const sNextGenerator = (errorHandler, req, res, next) => (error) => __awaiter(void 0, void 0, void 0, function* () {
    if ((0, checktypes_1.isUndefined)(error))
        return next();
    try {
        (0, checktypes_1.isAsyncFunction)(errorHandler)
            ? yield errorHandler(error, req, res, next)
            : errorHandler(error, req, res, next);
    }
    catch (localErrorHandlerError) {
        next(new CatchAsyncError_js_1.default('local error handler error!', 'localErrorHandlerError', {
            localErrorHandlerError,
            error,
        }));
    }
});
exports.sNextGenerator = sNextGenerator;
exports.default = exports.sNextGenerator;
